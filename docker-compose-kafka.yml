version: '2.1'

services:
#   product:
#     image: e-commerce-product-service
#     mem_limit: 512m
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
#     depends_on:
#       mongodb:
#         condition: service_healthy
#       kafka:
#         condition: service_started

#   product-p1:
#     image: e-commerce-product-service
#     mem_limit: 512m
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
#     depends_on:
#       mongodb:
#         condition: service_healthy
#       kafka:
#         condition: service_started

#   recommendation:
#     image: e-commerce-product-recommendation-service
#     mem_limit: 512m
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
#     depends_on:
#       mongodb:
#         condition: service_healthy
#       kafka:
#         condition: service_started

#   recommendation-p1:
#     image: e-commerce-product-recommendation-service
#     mem_limit: 512m
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
#     depends_on:
#       mongodb:
#         condition: service_healthy
#       kafka:
#         condition: service_started

#   review:
#     image: e-commerce-product-review-service
#     mem_limit: 512m
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
#     depends_on:
#       mongodb:
#         condition: service_healthy
#       kafka:
#         condition: service_started

#   review-p1:
#     image: e-commerce-product-review-service
#     mem_limit: 512m
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
#     depends_on:
#       mongodb:
#         condition: service_healthy
#       kafka:
#         condition: service_started

#   product-composite:
#     image: e-commerce-product-composite-service
#     mem_limit: 512m
#     ports:
#       - "8080:8080"
#     environment:
#       - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
#     depends_on:
#       kafka:
#         condition: service_started


#  mongodb:
#    image: mongo:7.0.16
#    container_name: mongodb
#    mem_limit: 512m
#    ports:
#      - "27017:27017"
#    command: mongod
#    healthcheck:
#      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
#      interval: 5s
#      timeout: 2s
#      retries: 60
#    networks:
#      - ecommerce-network
#    volumes:
#      - ./dockerdata_new/db:/data/db

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    container_name: zookeeper
    restart: always
    mem_limit: 512m
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - ecommerce-network

  kafka:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka
    restart: always
    mem_limit: 1024m
    ports:
      - "9092:9092"      # For external connections
      - "29092:29092"    # For internal Docker network connections
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge